"""updated_retriever_logger

Revision ID: 7522173046d6
Revises: 0691bed1718d
Create Date: 2024-11-15 11:49:39.496313

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7522173046d6'
down_revision = '0691bed1718d'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users_collection_name')
    op.drop_index('idx_blacklisted_tokens_collection_name_blacklisted_at', table_name='blacklisted_tokens_collection_name')
    op.drop_index('idx_blacklisted_tokens_collection_name_token', table_name='blacklisted_tokens_collection_name')
    op.drop_table('blacklisted_tokens_collection_name')
    op.drop_table('document_info_collection_name')
    op.drop_table('langchain_pg_embedding')
    op.drop_table('users_sample_collection')
    op.drop_table('document_info_sample_collection')
    op.drop_table('langchain_pg_collection')
    op.drop_index('idx_blacklisted_tokens_sample_collection_blacklisted_at', table_name='blacklisted_tokens_sample_collection')
    op.drop_index('idx_blacklisted_tokens_sample_collection_token', table_name='blacklisted_tokens_sample_collection')
    op.drop_table('blacklisted_tokens_sample_collection')
    op.drop_column('jb_flow_logger', 'response_model_used')
    op.drop_column('jb_flow_logger', 'tokens')
    op.drop_column('jb_flow_logger', 'model_response_time')
    op.add_column('jb_retriever_logger', sa.Column('top_chunk_k_value', sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('jb_retriever_logger', 'top_chunk_k_value')
    op.add_column('jb_flow_logger', sa.Column('model_response_time', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('jb_flow_logger', sa.Column('tokens', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('jb_flow_logger', sa.Column('response_model_used', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.create_table('blacklisted_tokens_sample_collection',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('blacklisted_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='blacklisted_tokens_sample_collection_pkey')
    )
    op.create_index('idx_blacklisted_tokens_sample_collection_token', 'blacklisted_tokens_sample_collection', ['token'], unique=False)
    op.create_index('idx_blacklisted_tokens_sample_collection_blacklisted_at', 'blacklisted_tokens_sample_collection', ['blacklisted_at'], unique=False)
    op.create_table('langchain_pg_collection',
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('uuid', name='langchain_pg_collection_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('document_info_sample_collection',
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('size_in_bytes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'processing'::text"), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('document_id', name='document_info_sample_collection_pkey')
    )
    op.create_table('users_sample_collection',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_superuser', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('verification_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('verification_code_expiry', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('profile_picture', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reset_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reset_token_expiry', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_sample_collection_pkey'),
    sa.UniqueConstraint('email', name='users_sample_collection_email_key')
    )
    op.create_table('langchain_pg_embedding',
    sa.Column('collection_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('document', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('cmetadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('custom_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['collection_id'], ['langchain_pg_collection.uuid'], name='langchain_pg_embedding_collection_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('uuid', name='langchain_pg_embedding_pkey')
    )
    op.create_table('document_info_collection_name',
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('size_in_bytes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.TEXT(), server_default=sa.text("'processing'::text"), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('document_id', name='document_info_collection_name_pkey')
    )
    op.create_table('blacklisted_tokens_collection_name',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('blacklisted_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='blacklisted_tokens_collection_name_pkey')
    )
    op.create_index('idx_blacklisted_tokens_collection_name_token', 'blacklisted_tokens_collection_name', ['token'], unique=False)
    op.create_index('idx_blacklisted_tokens_collection_name_blacklisted_at', 'blacklisted_tokens_collection_name', ['blacklisted_at'], unique=False)
    op.create_table('users_collection_name',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_superuser', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('verification_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('verification_code_expiry', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('profile_picture', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reset_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('reset_token_expiry', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_collection_name_pkey'),
    sa.UniqueConstraint('email', name='users_collection_name_email_key')
    )
    # ### end Alembic commands ###
